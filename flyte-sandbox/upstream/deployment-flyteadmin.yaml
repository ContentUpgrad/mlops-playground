apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: flyteadmin
  name: flyteadmin
  namespace: flyte
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flyteadmin
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
      labels:
        app: flyteadmin
        app.kubernetes.io/name: flyteadmin
        app.kubernetes.io/version: 0.4.13
    spec:
      containers:
        - command:
            - flyteadmin
            - --config
            - /etc/flyte/config/*.yaml
            - serve
          image: cr.flyte.org/flyteorg/flyteadmin:v0.6.104
          imagePullPolicy: IfNotPresent
          name: flyteadmin
          ports:
            - containerPort: 8088
            - containerPort: 8089
          resources:
            limits:
              cpu: "0.1"
              ephemeral-storage: 100Mi
              memory: 200Mi
          volumeMounts:
            - mountPath: /srv/flyte
              name: shared-data
            - mountPath: /etc/flyte/config
              name: config-volume
            - mountPath: /etc/db
              name: db-pass
            - mountPath: /etc/secrets/
              name: auth
        - command:
            - flyteadmin
            - --config
            - /etc/flyte/config/*.yaml
            - clusterresource
            - run
          image: cr.flyte.org/flyteorg/flyteadmin:v0.6.104
          imagePullPolicy: IfNotPresent
          name: sync-cluster-resources-goroutine
          volumeMounts:
            - mountPath: /etc/flyte/clusterresource/templates
              name: resource-templates
            - mountPath: /etc/flyte/config
              name: config-volume
        - command:
            - sh
            - -c
            - ln -s /usr/share/nginx/html /usr/share/nginx/html/openapi && sh /usr/local/bin/docker-run.sh
          env:
            - name: PAGE_TITLE
              value: Flyte Admin OpenAPI
            - name: SPEC_URL
              value: /api/v1/openapi
            - name: PORT
              value: "8087"
          image: docker.io/redocly/redoc
          imagePullPolicy: IfNotPresent
          name: redoc
          ports:
            - containerPort: 8087
          resources:
            limits:
              cpu: "0.1"
              memory: 200Mi
      initContainers:
        - command:
            - sh
            - -c
            - until pg_isready -h postgres -p 5432; do echo waiting for database; sleep 2; done;
          image: ecr.flyte.org/ubuntu/postgres:13-21.04_beta
          name: check-db-ready
          securityContext:
            runAsUser: 999
        - command:
            - flyteadmin
            - --config
            - /etc/flyte/config/*.yaml
            - migrate
            - run
          image: cr.flyte.org/flyteorg/flyteadmin:v0.6.104
          imagePullPolicy: IfNotPresent
          name: run-migrations
          volumeMounts:
            - mountPath: /etc/flyte/config
              name: config-volume
            - mountPath: /etc/db
              name: db-pass
        - command:
            - flyteadmin
            - --config
            - /etc/flyte/config/*.yaml
            - migrate
            - seed-projects
            - flytesnacks
            - flyteexamples
          image: cr.flyte.org/flyteorg/flyteadmin:v0.6.104
          imagePullPolicy: IfNotPresent
          name: seed-projects
          volumeMounts:
            - mountPath: /etc/flyte/config
              name: config-volume
            - mountPath: /etc/db
              name: db-pass
        - command:
            - flyteadmin
            - --config
            - /etc/flyte/config/*.yaml
            - clusterresource
            - sync
          image: cr.flyte.org/flyteorg/flyteadmin:v0.6.104
          imagePullPolicy: IfNotPresent
          name: sync-cluster-resources
          volumeMounts:
            - mountPath: /etc/flyte/clusterresource/templates
              name: resource-templates
            - mountPath: /etc/flyte/config
              name: config-volume
            - mountPath: /etc/db
              name: db-pass
        - args:
            - flyteadmin --config=/etc/flyte/config/*.yaml secrets init --localPath /etc/scratch/secrets && flyteadmin --config=/etc/flyte/config/*.yaml secrets create --fromPath /etc/scratch/secrets
          command:
            - /bin/sh
            - -c
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: cr.flyte.org/flyteorg/flyteadmin:v0.6.104
          imagePullPolicy: IfNotPresent
          name: generate-secrets
          volumeMounts:
            - mountPath: /etc/flyte/config
              name: config-volume
            - mountPath: /etc/scratch
              name: scratch
      securityContext:
        fsGroup: 65534
        fsGroupChangePolicy: Always
        runAsUser: 1001
      serviceAccountName: flyteadmin
      volumes:
        - configMap:
            name: clusterresource-template-dk5mbchdmt
          name: resource-templates
        - emptyDir: {}
          name: shared-data
        - emptyDir: {}
          name: scratch
        - configMap:
            name: flyte-admin-config-dbg8dt2dgb
          name: config-volume
        - name: db-pass
          secret:
            secretName: db-pass-9dgchhk2bm
        - name: auth
          secret:
            secretName: flyte-admin-auth

